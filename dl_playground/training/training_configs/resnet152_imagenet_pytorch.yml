job_importpath: training.pytorch.training_job.PyTorchTrainingJob
gpu_id: 1
dataset:
    fpath_df_train: /data/imagenet/from_access_links/metadata_lists/df_classification_train_set.csv
    fpath_df_validation: /data/imagenet/from_access_links/metadata_lists/df_classification_val_set.csv
    importpath: datasets.imagenet_dataset.ImageNetDataSet
    init_params: 
        config:
            height: 227
            width: 227
    train_transformations:
        - datasets.ops.per_image_standardization:
            sample_keys:
                value:
                    - 'image'
        - torchvision.transforms.functional.to_tensor:
            sample_keys:
                value: 
                    - 'image'
        - torch.tensor:
            sample_keys:
                value: 
                    - 'label'
            dtype:
                import: true
                value: 'torch.long'
    validation_transformations:
        - datasets.ops.per_image_standardization:
            sample_keys:
                value:
                    - 'image'
        - torchvision.transforms.functional.to_tensor:
            sample_keys:
                value: 
                    - 'image'
        - torch.tensor:
            sample_keys:
                value: 
                    - 'label'
            dtype:
                import: true
                value: 'torch.long'
    train_loading_params:
        batch_size: 32
        shuffle: True
        num_workers: 4
    validation_loading_params:
        batch_size: 32
        shuffle: False
        num_workers: 2
network:
    importpath: networks.pytorch.object_classification.resnet.ResNet
    init_params:
        config:
            n_channels: 3
            n_classes: 1000
            n_initial_channels: 64
            n_blocks_per_stage: [3, 8, 36, 3]
trainer:
    importpath: training.pytorch.imagenet_trainer.ImageNetTrainer
    init_params:
        config:
            optimizer: 'Adam'
            loss: 'CrossEntropyLoss'
            batch_size: 32
            n_epochs: 10
    metrics:
        - ktorch.metrics.TopKCategoricalAccuracy
